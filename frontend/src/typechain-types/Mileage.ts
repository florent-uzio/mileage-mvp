/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface MileageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allocateTrip"
      | "deleteAllTrips"
      | "deleteTrip"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateTrip"
      | "userTrips"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "TripAllocated"
      | "TripDeleted"
      | "TripUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allocateTrip",
    values: [
      AddressLike,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteAllTrips",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteTrip",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTrip",
    values: [AddressLike, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userTrips",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "allocateTrip",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteAllTrips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deleteTrip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateTrip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userTrips", data: BytesLike): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TripAllocatedEvent {
  export type InputTuple = [
    user: AddressLike,
    tripId: BigNumberish,
    startLocation: string,
    endLocation: string
  ];
  export type OutputTuple = [
    user: string,
    tripId: bigint,
    startLocation: string,
    endLocation: string
  ];
  export interface OutputObject {
    user: string;
    tripId: bigint;
    startLocation: string;
    endLocation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TripDeletedEvent {
  export type InputTuple = [user: AddressLike, tripId: BigNumberish];
  export type OutputTuple = [user: string, tripId: bigint];
  export interface OutputObject {
    user: string;
    tripId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TripUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    tripId: BigNumberish,
    startLocation: string,
    endLocation: string
  ];
  export type OutputTuple = [
    user: string,
    tripId: bigint,
    startLocation: string,
    endLocation: string
  ];
  export interface OutputObject {
    user: string;
    tripId: bigint;
    startLocation: string;
    endLocation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Mileage extends BaseContract {
  connect(runner?: ContractRunner | null): Mileage;
  waitForDeployment(): Promise<this>;

  interface: MileageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allocateTrip: TypedContractMethod<
    [
      user: AddressLike,
      startLocation: string,
      endLocation: string,
      startTime: BigNumberish,
      endTime: BigNumberish,
      totalDistance: BigNumberish,
      travelDuration: string
    ],
    [void],
    "nonpayable"
  >;

  deleteAllTrips: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  deleteTrip: TypedContractMethod<
    [user: AddressLike, tripId: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateTrip: TypedContractMethod<
    [
      user: AddressLike,
      tripId: BigNumberish,
      startLocation: string,
      endLocation: string
    ],
    [void],
    "nonpayable"
  >;

  userTrips: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, bigint, string] & {
        tripId: bigint;
        startLocation: string;
        endLocation: string;
        startTime: bigint;
        endTime: bigint;
        totalDistance: bigint;
        travelDuration: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allocateTrip"
  ): TypedContractMethod<
    [
      user: AddressLike,
      startLocation: string,
      endLocation: string,
      startTime: BigNumberish,
      endTime: BigNumberish,
      totalDistance: BigNumberish,
      travelDuration: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteAllTrips"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deleteTrip"
  ): TypedContractMethod<
    [user: AddressLike, tripId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateTrip"
  ): TypedContractMethod<
    [
      user: AddressLike,
      tripId: BigNumberish,
      startLocation: string,
      endLocation: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userTrips"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, bigint, string] & {
        tripId: bigint;
        startLocation: string;
        endLocation: string;
        startTime: bigint;
        endTime: bigint;
        totalDistance: bigint;
        travelDuration: string;
      }
    ],
    "view"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TripAllocated"
  ): TypedContractEvent<
    TripAllocatedEvent.InputTuple,
    TripAllocatedEvent.OutputTuple,
    TripAllocatedEvent.OutputObject
  >;
  getEvent(
    key: "TripDeleted"
  ): TypedContractEvent<
    TripDeletedEvent.InputTuple,
    TripDeletedEvent.OutputTuple,
    TripDeletedEvent.OutputObject
  >;
  getEvent(
    key: "TripUpdated"
  ): TypedContractEvent<
    TripUpdatedEvent.InputTuple,
    TripUpdatedEvent.OutputTuple,
    TripUpdatedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TripAllocated(address,uint256,string,string)": TypedContractEvent<
      TripAllocatedEvent.InputTuple,
      TripAllocatedEvent.OutputTuple,
      TripAllocatedEvent.OutputObject
    >;
    TripAllocated: TypedContractEvent<
      TripAllocatedEvent.InputTuple,
      TripAllocatedEvent.OutputTuple,
      TripAllocatedEvent.OutputObject
    >;

    "TripDeleted(address,uint256)": TypedContractEvent<
      TripDeletedEvent.InputTuple,
      TripDeletedEvent.OutputTuple,
      TripDeletedEvent.OutputObject
    >;
    TripDeleted: TypedContractEvent<
      TripDeletedEvent.InputTuple,
      TripDeletedEvent.OutputTuple,
      TripDeletedEvent.OutputObject
    >;

    "TripUpdated(address,uint256,string,string)": TypedContractEvent<
      TripUpdatedEvent.InputTuple,
      TripUpdatedEvent.OutputTuple,
      TripUpdatedEvent.OutputObject
    >;
    TripUpdated: TypedContractEvent<
      TripUpdatedEvent.InputTuple,
      TripUpdatedEvent.OutputTuple,
      TripUpdatedEvent.OutputObject
    >;
  };
}
