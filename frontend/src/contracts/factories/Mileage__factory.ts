/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type { Mileage, MileageInterface } from "../Mileage";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "initialOwner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tripId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "startLocation",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "endLocation",
        type: "string",
      },
    ],
    name: "TripAllocated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tripId",
        type: "uint256",
      },
    ],
    name: "TripDeleted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tripId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "startLocation",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "endLocation",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "totalDistance",
        type: "uint256",
      },
    ],
    name: "TripUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "tripIds",
        type: "uint256[]",
      },
    ],
    name: "TripsRetrieved",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "string",
        name: "startLocation",
        type: "string",
      },
      {
        internalType: "string",
        name: "endLocation",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "totalDistance",
        type: "uint256",
      },
    ],
    name: "allocateTrip",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "deleteAllTrips",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tripId",
        type: "uint256",
      },
    ],
    name: "deleteTrip",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getAllTripsForUser",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "tripId",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "startLocation",
            type: "string",
          },
          {
            internalType: "string",
            name: "endLocation",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "totalDistance",
            type: "uint256",
          },
        ],
        internalType: "struct Mileage.TripInformation[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getTripsForUser",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tripId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "startLocation",
        type: "string",
      },
      {
        internalType: "string",
        name: "endLocation",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "totalDistance",
        type: "uint256",
      },
    ],
    name: "updateTrip",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "userTrips",
    outputs: [
      {
        internalType: "uint256",
        name: "tripId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "startLocation",
        type: "string",
      },
      {
        internalType: "string",
        name: "endLocation",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "totalDistance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001f0038038062001f008339818101604052810190620000379190620001f4565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000ad5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000a4919062000237565b60405180910390fd5b620000be81620000c660201b60201c565b505062000254565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001bc826200018f565b9050919050565b620001ce81620001af565b8114620001da57600080fd5b50565b600081519050620001ee81620001c3565b92915050565b6000602082840312156200020d576200020c6200018a565b5b60006200021d84828501620001dd565b91505092915050565b6200023181620001af565b82525050565b60006020820190506200024e600083018462000226565b92915050565b611c9c80620002646000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063b66901f611610066578063b66901f614610136578063d359e40a14610166578063e15ffcb814610196578063e73c0c58146101b2578063f2fde38b146101ce5761009e565b806332fe78d3146100a3578063715018a6146100bf5780638867897b146100c95780638da5cb5b146100e5578063a77a691214610103575b600080fd5b6100bd60048036038101906100b8919061111d565b6101ea565b005b6100c7610337565b005b6100e360048036038101906100de91906111bc565b61034b565b005b6100ed610547565b6040516100fa919061120b565b60405180910390f35b61011d600480360381019061011891906111bc565b610570565b60405161012d94939291906112b4565b60405180910390f35b610150600480360381019061014b9190611307565b6106cd565b60405161015d91906113f2565b60405180910390f35b610180600480360381019061017b9190611307565b610822565b60405161018d919061158a565b60405180910390f35b6101b060048036038101906101ab9190611307565b6109f8565b005b6101cc60048036038101906101c791906115ac565b610a9d565b005b6101e860048036038101906101e39190611307565b610c08565b005b6101f2610c8e565b6000600260008154809291906102079061168e565b9190505590506000600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060405180608001604052808481526020018781526020018681526020018581525090806001815401808255809150506001900390600052602060002090600402016000909190919091506000820151816000015560208201518160010190816102ba91906118e2565b5060408201518160020190816102d091906118e2565b506060820151816003015550508573ffffffffffffffffffffffffffffffffffffffff167fc03428c5f6fe6b4ccfce009c6d7591813fb69f671d19d982056786f6e3fef4b7838787604051610327939291906119b4565b60405180910390a2505050505050565b61033f610c8e565b6103496000610d15565b565b610353610c8e565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060006103a28284610dd9565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8103610406576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fd90611a45565b60405180910390fd5b81600183805490506104189190611a65565b8154811061042957610428611a99565b5b906000526020600020906004020182828154811061044a57610449611a99565b5b906000526020600020906004020160008201548160000155600182018160010190816104769190611ade565b506002820181600201908161048b9190611ade565b5060038201548160030155905050818054806104aa576104a9611bc6565b5b60019003818190600052602060002090600402016000808201600090556001820160006104d79190610e67565b6002820160006104e79190610e67565b6003820160009055505090558373ffffffffffffffffffffffffffffffffffffffff167f9ef233dfd573efd9bc2bcbd614bb32a1eac42556e1c0625fee6d3e7a7c93f572846040516105399190611bf5565b60405180910390a250505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6001602052816000526040600020818154811061058c57600080fd5b9060005260206000209060040201600091509150508060000154908060010180546105b690611705565b80601f01602080910402602001604051908101604052809291908181526020018280546105e290611705565b801561062f5780601f106106045761010080835404028352916020019161062f565b820191906000526020600020905b81548152906001019060200180831161061257829003601f168201915b50505050509080600201805461064490611705565b80601f016020809104026020016040519081016040528092919081815260200182805461067090611705565b80156106bd5780601f10610692576101008083540402835291602001916106bd565b820191906000526020600020905b8154815290600101906020018083116106a057829003601f168201915b5050505050908060030154905084565b60606000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000818054905067ffffffffffffffff81111561073257610731610fbc565b5b6040519080825280602002602001820160405280156107605781602001602082028036833780820191505090505b50905060005b82805490508110156107c95782818154811061078557610784611a99565b5b9060005260206000209060040201600001548282815181106107aa576107a9611a99565b5b60200260200101818152505080806107c19061168e565b915050610766565b508373ffffffffffffffffffffffffffffffffffffffff167f5946586725257c06c52b26278794b5f1c7403cac9c1cb53c79da7f98510e4dd98260405161081091906113f2565b60405180910390a28092505050919050565b6060600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156109ed5783829060005260206000209060040201604051806080016040529081600082015481526020016001820180546108c090611705565b80601f01602080910402602001604051908101604052809291908181526020018280546108ec90611705565b80156109395780601f1061090e57610100808354040283529160200191610939565b820191906000526020600020905b81548152906001019060200180831161091c57829003601f168201915b5050505050815260200160028201805461095290611705565b80601f016020809104026020016040519081016040528092919081815260200182805461097e90611705565b80156109cb5780601f106109a0576101008083540402835291602001916109cb565b820191906000526020600020905b8154815290600101906020018083116109ae57829003601f168201915b5050505050815260200160038201548152505081526020019060010190610883565b505050509050919050565b610a00610c8e565b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610a4b9190610ea7565b8073ffffffffffffffffffffffffffffffffffffffff167f9ef233dfd573efd9bc2bcbd614bb32a1eac42556e1c0625fee6d3e7a7c93f5726000604051610a929190611c4b565b60405180910390a250565b610aa5610c8e565b6000600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000610af48287610dd9565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8103610b58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4f90611a45565b60405180910390fd5b6000828281548110610b6d57610b6c611a99565b5b9060005260206000209060040201905085816001019081610b8e91906118e2565b5084816002019081610ba091906118e2565b508381600301819055508773ffffffffffffffffffffffffffffffffffffffff167f3846cfcb89f7a0db46abd1ab242a342baae70db4c0efbad8bcca712f14682c7988888888604051610bf694939291906112b4565b60405180910390a25050505050505050565b610c10610c8e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c825760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610c79919061120b565b60405180910390fd5b610c8b81610d15565b50565b610c96610e5f565b73ffffffffffffffffffffffffffffffffffffffff16610cb4610547565b73ffffffffffffffffffffffffffffffffffffffff1614610d1357610cd7610e5f565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610d0a919061120b565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080600090505b8380549050811015610e345782848281548110610e0157610e00611a99565b5b90600052602060002090600402016000015403610e215780915050610e59565b8080610e2c9061168e565b915050610de1565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90505b92915050565b600033905090565b508054610e7390611705565b6000825580601f10610e855750610ea4565b601f016020900490600052602060002090810190610ea39190610ecb565b5b50565b5080546000825560040290600052602060002090810190610ec89190610ee8565b50565b5b80821115610ee4576000816000905550600101610ecc565b5090565b5b80821115610f2b57600080820160009055600182016000610f0a9190610e67565b600282016000610f1a9190610e67565b600382016000905550600401610ee9565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f6e82610f43565b9050919050565b610f7e81610f63565b8114610f8957600080fd5b50565b600081359050610f9b81610f75565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ff482610fab565b810181811067ffffffffffffffff8211171561101357611012610fbc565b5b80604052505050565b6000611026610f2f565b90506110328282610feb565b919050565b600067ffffffffffffffff82111561105257611051610fbc565b5b61105b82610fab565b9050602081019050919050565b82818337600083830152505050565b600061108a61108584611037565b61101c565b9050828152602081018484840111156110a6576110a5610fa6565b5b6110b1848285611068565b509392505050565b600082601f8301126110ce576110cd610fa1565b5b81356110de848260208601611077565b91505092915050565b6000819050919050565b6110fa816110e7565b811461110557600080fd5b50565b600081359050611117816110f1565b92915050565b6000806000806080858703121561113757611136610f39565b5b600061114587828801610f8c565b945050602085013567ffffffffffffffff81111561116657611165610f3e565b5b611172878288016110b9565b935050604085013567ffffffffffffffff81111561119357611192610f3e565b5b61119f878288016110b9565b92505060606111b087828801611108565b91505092959194509250565b600080604083850312156111d3576111d2610f39565b5b60006111e185828601610f8c565b92505060206111f285828601611108565b9150509250929050565b61120581610f63565b82525050565b600060208201905061122060008301846111fc565b92915050565b61122f816110e7565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561126f578082015181840152602081019050611254565b60008484015250505050565b600061128682611235565b6112908185611240565b93506112a0818560208601611251565b6112a981610fab565b840191505092915050565b60006080820190506112c96000830187611226565b81810360208301526112db818661127b565b905081810360408301526112ef818561127b565b90506112fe6060830184611226565b95945050505050565b60006020828403121561131d5761131c610f39565b5b600061132b84828501610f8c565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611369816110e7565b82525050565b600061137b8383611360565b60208301905092915050565b6000602082019050919050565b600061139f82611334565b6113a9818561133f565b93506113b483611350565b8060005b838110156113e55781516113cc888261136f565b97506113d783611387565b9250506001810190506113b8565b5085935050505092915050565b6000602082019050818103600083015261140c8184611394565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b600061145c82611235565b6114668185611440565b9350611476818560208601611251565b61147f81610fab565b840191505092915050565b60006080830160008301516114a26000860182611360565b50602083015184820360208601526114ba8282611451565b915050604083015184820360408601526114d48282611451565b91505060608301516114e96060860182611360565b508091505092915050565b6000611500838361148a565b905092915050565b6000602082019050919050565b600061152082611414565b61152a818561141f565b93508360208202850161153c85611430565b8060005b85811015611578578484038952815161155985826114f4565b945061156483611508565b925060208a01995050600181019050611540565b50829750879550505050505092915050565b600060208201905081810360008301526115a48184611515565b905092915050565b600080600080600060a086880312156115c8576115c7610f39565b5b60006115d688828901610f8c565b95505060206115e788828901611108565b945050604086013567ffffffffffffffff81111561160857611607610f3e565b5b611614888289016110b9565b935050606086013567ffffffffffffffff81111561163557611634610f3e565b5b611641888289016110b9565b925050608061165288828901611108565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611699826110e7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036116cb576116ca61165f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061171d57607f821691505b6020821081036117305761172f6116d6565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026117987fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261175b565b6117a2868361175b565b95508019841693508086168417925050509392505050565b6000819050919050565b60006117df6117da6117d5846110e7565b6117ba565b6110e7565b9050919050565b6000819050919050565b6117f9836117c4565b61180d611805826117e6565b848454611768565b825550505050565b600090565b611822611815565b61182d8184846117f0565b505050565b5b818110156118515761184660008261181a565b600181019050611833565b5050565b601f8211156118965761186781611736565b6118708461174b565b8101602085101561187f578190505b61189361188b8561174b565b830182611832565b50505b505050565b600082821c905092915050565b60006118b96000198460080261189b565b1980831691505092915050565b60006118d283836118a8565b9150826002028217905092915050565b6118eb82611235565b67ffffffffffffffff81111561190457611903610fbc565b5b61190e8254611705565b611919828285611855565b600060209050601f83116001811461194c576000841561193a578287015190505b61194485826118c6565b8655506119ac565b601f19841661195a86611736565b60005b828110156119825784890151825560018201915060208501945060208101905061195d565b8683101561199f578489015161199b601f8916826118a8565b8355505b6001600288020188555050505b505050505050565b60006060820190506119c96000830186611226565b81810360208301526119db818561127b565b905081810360408301526119ef818461127b565b9050949350505050565b7f54726970206e6f7420666f756e64000000000000000000000000000000000000600082015250565b6000611a2f600e83611240565b9150611a3a826119f9565b602082019050919050565b60006020820190508181036000830152611a5e81611a22565b9050919050565b6000611a70826110e7565b9150611a7b836110e7565b9250828203905081811115611a9357611a9261165f565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081549050611ad781611705565b9050919050565b818103611aec575050611bc4565b611af582611ac8565b67ffffffffffffffff811115611b0e57611b0d610fbc565b5b611b188254611705565b611b23828285611855565b6000601f831160018114611b525760008415611b40578287015490505b611b4a85826118c6565b865550611bbd565b601f198416611b6087611736565b9650611b6b86611736565b60005b82811015611b9357848901548255600182019150600185019450602081019050611b6e565b86831015611bb05784890154611bac601f8916826118a8565b8355505b6001600288020188555050505b5050505050505b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000602082019050611c0a6000830184611226565b92915050565b6000819050919050565b6000611c35611c30611c2b84611c10565b6117ba565b6110e7565b9050919050565b611c4581611c1a565b82525050565b6000602082019050611c606000830184611c3c565b9291505056fea26469706673582212202b0c5f4e0c799134b60ef353ba038a122ee06c650407910f95bf959e4764002664736f6c63430008130033";

type MileageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MileageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Mileage__factory extends ContractFactory {
  constructor(...args: MileageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    initialOwner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(initialOwner, overrides || {});
  }
  override deploy(
    initialOwner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(initialOwner, overrides || {}) as Promise<
      Mileage & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Mileage__factory {
    return super.connect(runner) as Mileage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MileageInterface {
    return new Interface(_abi) as MileageInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Mileage {
    return new Contract(address, _abi, runner) as unknown as Mileage;
  }
}
